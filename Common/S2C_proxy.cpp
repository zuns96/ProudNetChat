




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "S2C_proxy.h"

namespace S2C {


        
	bool Proxy::Recv_Rpy_Login ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Rpy_Login & rpy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Recv_Rpy_Login;
__msg.Write(__msgid); 
	
__msg << rpy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Recv_Rpy_Login, (::Proud::RmiID)Rmi_Recv_Rpy_Login);
	}

	bool Proxy::Recv_Rpy_Login ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Rpy_Login & rpy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Recv_Rpy_Login;
__msg.Write(__msgid); 
	
__msg << rpy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Recv_Rpy_Login, (::Proud::RmiID)Rmi_Recv_Rpy_Login);
	}
        
	bool Proxy::Recv_Rpy_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Rpy_Chat & rpy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Recv_Rpy_Chat;
__msg.Write(__msgid); 
	
__msg << rpy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Recv_Rpy_Chat, (::Proud::RmiID)Rmi_Recv_Rpy_Chat);
	}

	bool Proxy::Recv_Rpy_Chat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Rpy_Chat & rpy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Recv_Rpy_Chat;
__msg.Write(__msgid); 
	
__msg << rpy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Recv_Rpy_Chat, (::Proud::RmiID)Rmi_Recv_Rpy_Chat);
	}
        
	bool Proxy::Recv_Rpy_System_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Rpy_System_Chat & rpy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Recv_Rpy_System_Chat;
__msg.Write(__msgid); 
	
__msg << rpy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Recv_Rpy_System_Chat, (::Proud::RmiID)Rmi_Recv_Rpy_System_Chat);
	}

	bool Proxy::Recv_Rpy_System_Chat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Rpy_System_Chat & rpy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Recv_Rpy_System_Chat;
__msg.Write(__msgid); 
	
__msg << rpy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Recv_Rpy_System_Chat, (::Proud::RmiID)Rmi_Recv_Rpy_System_Chat);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Recv_Rpy_Login =_PNT("Recv_Rpy_Login");
#else
const PNTCHAR* Proxy::RmiName_Recv_Rpy_Login =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Recv_Rpy_Chat =_PNT("Recv_Rpy_Chat");
#else
const PNTCHAR* Proxy::RmiName_Recv_Rpy_Chat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Recv_Rpy_System_Chat =_PNT("Recv_Rpy_System_Chat");
#else
const PNTCHAR* Proxy::RmiName_Recv_Rpy_System_Chat =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Recv_Rpy_Login;

}



