




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "C2S_proxy.h"

namespace C2S {


        
	bool Proxy::RequestLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & userName)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLogon;
__msg.Write(__msgid); 
	
__msg << userName;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestLogon, (::Proud::RmiID)Rmi_RequestLogon);
	}

	bool Proxy::RequestLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & userName)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLogon;
__msg.Write(__msgid); 
	
__msg << userName;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestLogon, (::Proud::RmiID)Rmi_RequestLogon);
	}
        
	bool Proxy::Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & text)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Chat;
__msg.Write(__msgid); 
	
__msg << text;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Chat, (::Proud::RmiID)Rmi_Chat);
	}

	bool Proxy::Chat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & text)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Chat;
__msg.Write(__msgid); 
	
__msg << text;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Chat, (::Proud::RmiID)Rmi_Chat);
	}
        
	bool Proxy::RequestP2PGroup ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostIDArray & groupMemberList)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestP2PGroup;
__msg.Write(__msgid); 
	
__msg << groupMemberList;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestP2PGroup, (::Proud::RmiID)Rmi_RequestP2PGroup);
	}

	bool Proxy::RequestP2PGroup ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostIDArray & groupMemberList)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestP2PGroup;
__msg.Write(__msgid); 
	
__msg << groupMemberList;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestP2PGroup, (::Proud::RmiID)Rmi_RequestP2PGroup);
	}
        
	bool Proxy::RequestLeaveP2PGroup ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & groupID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLeaveP2PGroup;
__msg.Write(__msgid); 
	
__msg << groupID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestLeaveP2PGroup, (::Proud::RmiID)Rmi_RequestLeaveP2PGroup);
	}

	bool Proxy::RequestLeaveP2PGroup ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostID & groupID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLeaveP2PGroup;
__msg.Write(__msgid); 
	
__msg << groupID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestLeaveP2PGroup, (::Proud::RmiID)Rmi_RequestLeaveP2PGroup);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestLogon =_PNT("RequestLogon");
#else
const PNTCHAR* Proxy::RmiName_RequestLogon =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Chat =_PNT("Chat");
#else
const PNTCHAR* Proxy::RmiName_Chat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestP2PGroup =_PNT("RequestP2PGroup");
#else
const PNTCHAR* Proxy::RmiName_RequestP2PGroup =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestLeaveP2PGroup =_PNT("RequestLeaveP2PGroup");
#else
const PNTCHAR* Proxy::RmiName_RequestLeaveP2PGroup =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestLogon;

}



